2013-10-27
----------

Observation:

The clone URLs that github offers (both https: and git:) are unsuitable for "npm install", the URL must be composed manually. Also, "npm update" does not automatically update to the latest version from git.

------

The whole idea of TDD is proving to be more tedious than expected. Reasons:

1) The promis'ified asynchronous interface.

2) The need to come up with test cases.

3) The general extra work coming from the fact that analysing output programmatically is just so well supported.

(2) and (3) may need a bit of exploration. Why is this difficult?

One part is that code editors still offer no really good ways of navigating code, or of generating and managing test cases automatically. There are opportunities that way.


2013-10-21
----------

Ok. The Streamable idea is gone (for now), and the ObjectWrapper class can work with Uint8Arrays. 

Somehow, I'm not really satisfied with the situation. What about the other ArrayBuffer view types (Int8Array, etc.)?

More importantly, it's time to move toward practical matters now. What am I trying to accomplish? When I started out with this MVC project, my goal was to lay the first brick for a future library that would enable programmers to work with all kinds of data stores.

Let's review what this actually means in the real world:

(1) From another project I'm working on (Locsim) comes the idea of using the file system, i.e. JSON files and binary (png/jpeg) files as the back-end of a data store.

(2) The obvious players: CouchDB and MongoDB certainly need to be leveraged at some point.

(3) Classical Object-to-Relational Mapping might come into play as well.

(4) Classical XML or JSON

(5) Others: a strictly binary, compact format; or anything else not mentioned above.

Not all of this needs to implemented right away, or even at all. But all of it should be possible.

An important thing to keep in mind is that the whole Captn project is targeting beginner programmers (among others), or even non-programmers such as web designers. How would such a person approach the idea of using a database?

This leads to the subject of modelling. Modelling must be as straightforward as humanly possible. The wizard (or whatever) asks: "What do you need to store?" (-> customers, orders), then, for each answer: "What gets written in each entry of that table?" (-> date&time, item order code, etc.)

[This reminds me: we have no explicit support for date/time fields as yet. Is this needed, and does it imply the need for type meta-information (which wasn't necessary until now)?]

Therefore, it's time now to think about meta-data. We need to describe: (1) collections, (2) objects. 

Data types: numbers; strings; date/time; objects; collections; binary.

It's obvious I need to extend the specifications with a meta-data interface. How about a Object#metaData() method that returns a list of field descriptors: name + type ?

No need to strongly type objects. However, object factories (such as Collection implementations) shall accept an "options" parameter, which may contain a member "fields" containing field descriptors. Can be used to throw exceptions when the back-end doesn't support a field or field/type combination.

Ok, this is going to be simple, and doesn't need to be done right now.

The next steps should be the implementation of the file system based Data Store (btw this shall be an official term within the JP-MVC library).

What we need:
- The top-level collection is implemented as a JSON file containing an array-like object containing strings.
- These strings are the filenames (extensionless) of JSON files describing instruments ("instrument files").
- The instrument files contain standard data types (numbers, strings, objects), but also reference picture files.

The fastest way to do this is probably implement it from scratch, without trying to use or create library code.
- When creating a new instrument, the "name" field is used to determine the name of the instrument file.
- Picture files can be treated like binary fields, but they need to be given names. How to associate a name with an otherwise binary field?
  -> introduce the concept of "attributes" (will discuss below)
- How to save or discard changes? This has not been specified or even discussed yet. Will discuss below.

Attributes

Attributes shall be simple, just as HTML/XML attributes (to and from which they should translate effortlessly at some point in the future). So, they should just be name-value pairs of strings.

Specification: Data Stores may support attributes by providing the setAttr(<name>, <value>) and getAttr(<name>) methods on some or all objects and collections. In contrast to other methods of the Object and Collection interfaces, these methods shall be synchronous. 

This specification introduces a restriction when copying from one data store to another, in that the target store must always support a superset of the attributes supported by the source store. One way to reduce this problem would be to require that all implementations supporting attributes support them anywhere and in any quantity. Implementations could do this through a non-enumerable property.

Save & discard

The bits of specification so far implied that modifications on properties were definitive and non-undoable, which is natural for the Wrapper implementations created so far. The situation is different though for an implementation based on files, so a specification needs to be formulated than can unify that aspect for all possible implementations.

This subject could grow very complex, reaching into atomic transactions and concurrency locking. In keeping with the idea of "as simple as possible", I now define that a Data Store implementation shall, for the time being, support a single method Store#commitChanges().

The Object and Collection interfaces however are not necessarily dependent on the existence of a Store implementation - they can be provided "as-is" (which is the case with ObjectWrapper and ArrayWrapper so far).

In fact, I have not yet defined what a Store must do. I do so now: a Store implementation must provide the following methods:

- Store#getRoot(): returns a promise for the root Collection or Object, or null if there is none.
- Store#commitChanges(): commits the changes, if not done already. Promisified, can be a no-op

Note: there is not "discard" or "rollback" or "undo" yet. I'm deliberately (though lazily) keeping them out of the specification so far.

Next steps:

- Create an embryotic test suite for Store
- Make the jp-mvc library available system-wide (link)
- Start implementing InstrumentFSStore as part of the Instrumente Locsim module. Use TDD, operating on a copy of the DB folder.


2013-10-20
----------

I think I made a rather stupid mistake.

All this stuff about the "Streamable" interface - it sounds nice, but thinking about it, its usefulness is rather limited. It has no place in a piece of software that aims to be "the simplest possible to get the job done".

Consequently, I'm changing the specification to this: get() shall return promises for values in all cases. The values can be simple types, or they can be byte arrays, represented by Uint8Array objects. (No decision is made at this point about standard JavaScript arrays and objects.)
Object#set() shall of course work conversely.

On to changing the code...

2013-10-19 (noon)
----------

A tiny bit of planning is needed at this point.

I now want to introduce "streamable" properties to the Model concept (Streamable interface). In order to test this, the test suite functions need to be informed about which field(s) implement that concept.

So, I think I should change and normalize the signatures of the test suites a bit. Maybe an "options" parameter will do the trick.

Options, for both test suites (for read-only and for writeable models):
- ref_object      (mandatory)       contains the "raw" JavaScript object to compare the model against
- streamables     (optional)        array with the objects, each containing a field name and its reference content (name, content)

Should a distinction be made between binary and text Streamables? I think not; that would just be unnecessary complexity.

Ok, next step: change those signatures. ... done. But I forgot the collections:

- ref_items       (mandatory)
- new_items       (optional)        for the "writeable" test suite

Ok, back to implementing streamable tests.

2013-10-19
----------

Took way too long again tonight - not sure why this time. The tmp library may have been the cause (removed now).


2013-10-17
----------

Some progress today - though I got slowed down by a stupid mistake, once more. But: I have a working test subroutine for the read-only part of the new Streamable interface, and a test for that testsuite, using a mock-up Streamable object based on q-io/fs.

Found out about the extremely useful before(), after(), beforeEach() and afterEach() functions of Mocha (or was it Should?).

Next steps: 

- move the new test suite to the test-lib folder
- separate out the test suite testing code into a sub-folder "test" within test-lib ?
- create another test suite for writeable Streamables


2013-10-14
----------

Wanted to dive right into this "large property" business, but (thankfully) did some research first.

I think the answer is that Object#get() should deliver "large" values as "stream"-based objects, following the standard established by Kris Kowalski's q-io library, which defines Readers and Writers.

Therefore, Object#get() should return an object that implements an interface I shall call "Streamable", offering a single method open(). That method should take an option argument loosely following its definition in q-io/fs; meaning that it should accept:
  1) a "flags" property, which however must only implement the "w" and "r" values. In fact, a read-only collection should not accept the values "w" or "a" (though I will not require that an exception be thrown in such cases)
  2) a "charset" property, which shall accept (at minimum) the values "utf-8" (the default if omitted) and "binary".

Streamable#open() shall return an object conforming to the Reader or Writer interface as defined by q-io.

Another question: how can user code know whether the property it get()s is a value or a Streamable ?

The argument could be made that user code should know what type each Object property must contain. Right now I'm tending to follow that argument. [Note: the test case for Object#getAll() will have to be updated. It will need to be able to detect Buffer objects in the reference object, which shall be used as the "raw" representations of large data.]

Next steps:

1) model-tests.js: implement a test suite for the Streamable interface - or actually two of them, one read-only, the other writing. Integrate these suites into the testReadOnlyObject() and testObject() suites. The test suites shall test both utf-8 and binary encoding.

1b) (option) use q-io/fs to test the Streamable test suites.

2) Extend ObjectWrapper to support ArrayBuffer fields (i.e. wrapping them into Streamables)


2013-10-13
----------

Some more work today. I decided to implement removal from Collections through their items, i.e. CollectionItem#remove() and (as a side effect) CollectionItem#dispose().

This approach does not require an index into a collection.

I'm rather happy with the way this is taking shape.

The time may be ripe to tackle a filesystem-based implementation.

Or maybe not - first I need to figure out how to handle large properties (text and binary).

2013-10-01
----------

I just successfully implemented the first test case for what will become the JPMVC Object "interface" (I say successfully because, because I'm using promises inside the test routines, and I wasn't at all sure whether that would work). 

I'm using quotation marks for the word "interface" here because interfaces are not part of the JavaScript language.
Actually, my intent is to sort of "replace" formal interface definitions with the test cases I have just begun (see test-lib/model-tests.js). The idea is that these tests will an instance of a model together with a "raw" JavaScript object or array, then execute test cases using the raw object as a reference to compare against. Hopefully, this pattern *should* adapt to all future implementations of the Object and Collection interfaces.

One uncertainty bothering me right now is whether or not to define the whole interfaces as promise-based. Disadvantages: for synchronous implementations, wrapping the results in promises is both a waste of cycles and a way to render even trivial code hard to read. Advantage: a predictable and clear interface.

Right now, I think the way to go is to allow both synchronous and promise-based operation, and making it part of the specification to use Q.when() on all functions UNLESS the programmer can be sure that the particular implementation being used is synchronous.
This has drawbacks too - it's a classical trap producing code that fails when you least expect it (writing with a sychronous interface in mind, then replacing it with an asynchronous one).

Alternatives:
	a) use dual methods, adding "Sync" to synchronous versions of the methods (drawbacks: long, ugly - and what if the implementation can't support synchronous?)
	b) define synchronous and asynchronous versions of the interfaces (the "wrapper" implementations would then likely be the only ones to support both, or exist in both forms)

I'm tending for (b) right now. Not quite happy with it though - what if certain operations could be done synchronously, but not others? get()/set() could arguably always be implemented
synchronously except for blobs - though that last exception, any exception, renders the other cases sort of moot.

Ok. The safe choice is asynchronous, always. To make things nicer, how about sget() and sset() (s for synchronous), which will throw exceptions if not supported? This will make it much less likely to program doomed-to-fail-in-the-future code. [Note to myself: program tests such that synchronous methods must either deliver the expected result right away, or throw an exception.]

2013-09-29
----------

The test suite works. Yet I feel somewhat less than satisfied. One reason is that I still go back-and-forth on some design decisions. Could be a sign that I'm still in the experimental stage, and that a redesign will have to come later on. Note to myself: I will now take note of uncertainties, then leave them be.

Uncertainties: 

- some method names
	
- whether some methods are needed at all

- how far to treat arrays and objects similarly, and where to make a clear distinction (current state: separate Wrapper classes with a common ancestor)
	
- how to handle collections in such a way that support for large, non-indexed collections won't become impractical later on

- whether the cache can be considered efficient enough, even for a first attempt

- whether I should try right away to create implementation-independent tests for Object and Collection "interfaces", or wait till the object wrapper is complete.

All in all though, I'm please at this first step toward building a real Model-View-Controller library.

Things left to do: Collection#addNewObject(); decide whether to support arrays of non-object values through a "virtual" property, or simply let them be arrays (tending towards the latter right now).

I wrote up some notes today regarding the implementation of a filesystem adapter library. No need to write it all down here, but the basic principle is make a Collection out of a directory; Objects out of JSON files; and binary files into blob properties (buffers).

Next steps:

- Implement Collection#newItem(), complete with notifications